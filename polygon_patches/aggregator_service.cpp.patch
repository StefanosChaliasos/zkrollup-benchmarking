diff --git a/test/service/aggregator/aggregator_service.cpp b/test/service/aggregator/aggregator_service.cpp
index c1741343..20f7e650 100644
--- a/test/service/aggregator/aggregator_service.cpp
+++ b/test/service/aggregator/aggregator_service.cpp
@@ -4,6 +4,9 @@
 #include "proof_fflonk.hpp"
 #include "definitions.hpp"
 #include <grpcpp/grpcpp.h>
+#include <chrono>
+#include <iostream>
+#include <fstream>
 
 using grpc::Server;
 using grpc::ServerBuilder;
@@ -55,7 +58,6 @@ using grpc::Status;
     const string inputFileFinal  = outputFile03;
     const string outputFileFinal = "testvectors/finalProof/proof.json";
 
-
     // Get status
     grpcStatus = GetStatus(context, stream);
     if (grpcStatus.error_code() != Status::OK.error_code())
@@ -75,9 +77,33 @@ using grpc::Status;
         return Status::CANCELLED;
     }
 
+    std::ofstream outputFile("benchmarks.csv", std::ios::app | std::ios::out);
+
+    // If env variable BENCH_BATCH is set then just produce one batch proof
+    if (getenv("BENCH_BATCH") != NULL) {
+        auto start = std::chrono::high_resolution_clock::now();
+
+        grpcStatus = GenAndGetBatchProof(context, stream, inputFile0, outputFile0);
+        if (grpcStatus.error_code() != Status::OK.error_code())
+        {
+            return grpcStatus;
+        }
+        cout << "AggregatorServiceImpl::Channel() called GenAndGetBatchProof(" << inputFile0 << ", " << outputFile0 << ")" << endl;
+
+        auto stop = std::chrono::high_resolution_clock::now();
+        auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(stop - start);
+        outputFile << duration.count();
+        // Close the file
+        outputFile.close();
+    } else {
+
     for ( uint64_t loop=0; loop<AGGREGATOR_SERVER_NUMBER_OF_LOOPS; loop++ )
     {
         // Generate batch proof 0
+
+        // Start timer
+        auto start = std::chrono::high_resolution_clock::now();
+
         grpcStatus = GenAndGetBatchProof(context, stream, inputFile0, outputFile0);
         if (grpcStatus.error_code() != Status::OK.error_code())
         {
@@ -85,7 +111,23 @@ using grpc::Status;
         }
         cout << "AggregatorServiceImpl::Channel() called GenAndGetBatchProof(" << inputFile0 << ", " << outputFile0 << ")" << endl;
 
+        // Stop timer
+        auto stop = std::chrono::high_resolution_clock::now();
+        auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(stop - start);
+        // Create an output file stream (ofstream)
+        // Check if the file is open successfully
+        if (outputFile.is_open()) {
+            // Write the elapsed time to the file
+            outputFile << duration.count() << ", ";
+        } else {
+            std::cout << "Error opening file!" << std::endl;
+        }
+
         // Generate batch proof 1
+
+        // Start timer
+        start = std::chrono::high_resolution_clock::now();
+
         grpcStatus = GenAndGetBatchProof(context, stream, inputFile1, outputFile1);
         if (grpcStatus.error_code() != Status::OK.error_code())
         {
@@ -101,8 +143,24 @@ using grpc::Status;
         }
         cout << "AggregatorServiceImpl::Channel() called GenAndGetAggregatedProof(" << inputFile01a << ", " << inputFile01b << ", " << outputFile01 << ")" << endl;
 
+        // Stop timer
+        stop = std::chrono::high_resolution_clock::now();
+        duration = std::chrono::duration_cast<std::chrono::milliseconds>(stop - start);
+        // Create an output file stream (ofstream)
+        // Check if the file is open successfully
+        if (outputFile.is_open()) {
+            // Write the elapsed time to the file
+            outputFile << duration.count() << ", ";
+        } else {
+            std::cout << "Error opening file!" << std::endl;
+        }
+
 
         // Generate batch proof 2
+
+        // Start timer
+        start = std::chrono::high_resolution_clock::now();
+
         grpcStatus = GenAndGetBatchProof(context, stream, inputFile2, outputFile2);
         if (grpcStatus.error_code() != Status::OK.error_code())
         {
@@ -110,7 +168,23 @@ using grpc::Status;
         }
         cout << "AggregatorServiceImpl::Channel() called GenAndGetBatchProof(" << inputFile2 << ", " << outputFile2 << ")" << endl;
 
+        // Stop timer
+        stop = std::chrono::high_resolution_clock::now();
+        duration = std::chrono::duration_cast<std::chrono::milliseconds>(stop - start);
+        // Create an output file stream (ofstream)
+        // Check if the file is open successfully
+        if (outputFile.is_open()) {
+            // Write the elapsed time to the file
+            outputFile << duration.count() << ", ";
+        } else {
+            std::cout << "Error opening file!" << std::endl;
+        }
+
         // Generate batch proof 3
+
+        // Start timer
+        start = std::chrono::high_resolution_clock::now();
+
         grpcStatus = GenAndGetBatchProof(context, stream, inputFile3, outputFile3);
         if (grpcStatus.error_code() != Status::OK.error_code())
         {
@@ -118,7 +192,23 @@ using grpc::Status;
         }
         cout << "AggregatorServiceImpl::Channel() called GenAndGetBatchProof(" << inputFile3 << ", " << outputFile3 << ")" << endl;
 
+        // Stop timer
+        stop = std::chrono::high_resolution_clock::now();
+        duration = std::chrono::duration_cast<std::chrono::milliseconds>(stop - start);
+        // Create an output file stream (ofstream)
+        // Check if the file is open successfully
+        if (outputFile.is_open()) {
+            // Write the elapsed time to the file
+            outputFile << duration.count() << ", ";
+        } else {
+            std::cout << "Error opening file!" << std::endl;
+        }
+
         // Generate aggregated proof 23
+
+        // Start timer
+        start = std::chrono::high_resolution_clock::now();
+
         grpcStatus = GenAndGetAggregatedProof(context, stream, inputFile23a, inputFile23b, outputFile23);
         if (grpcStatus.error_code() != Status::OK.error_code())
         {
@@ -126,8 +216,24 @@ using grpc::Status;
         }
         cout << "AggregatorServiceImpl::Channel() called GenAndGetAggregatedProof(" << inputFile23a << ", " << inputFile23b << ", " << outputFile23 << ")" << endl;
 
+        // Stop timer
+        stop = std::chrono::high_resolution_clock::now();
+        duration = std::chrono::duration_cast<std::chrono::milliseconds>(stop - start);
+        // Create an output file stream (ofstream)
+        // Check if the file is open successfully
+        if (outputFile.is_open()) {
+            // Write the elapsed time to the file
+            outputFile << duration.count() << ", ";
+        } else {
+            std::cout << "Error opening file!" << std::endl;
+        }
+
 
         // Generate aggregated proof 03
+
+        // Start timer
+        start = std::chrono::high_resolution_clock::now();
+
         grpcStatus = GenAndGetAggregatedProof(context, stream, inputFile03a, inputFile03b, outputFile03);
         if (grpcStatus.error_code() != Status::OK.error_code())
         {
@@ -142,6 +248,21 @@ using grpc::Status;
             return grpcStatus;
         }
         cout << "AggregatorServiceImpl::Channel() called GenAndGetFinalProof(" << inputFileFinal << ", " << outputFileFinal << ")" << endl;
+        // Stop timer
+        stop = std::chrono::high_resolution_clock::now();
+        duration = std::chrono::duration_cast<std::chrono::milliseconds>(stop - start);
+        // Create an output file stream (ofstream)
+        // Check if the file is open successfully
+        if (outputFile.is_open()) {
+            // Write the elapsed time to the file
+            outputFile << duration.count();
+            // Close the file
+            outputFile.close();
+        } else {
+            std::cout << "Error opening file!" << std::endl;
+        }
+
+    }
     }
 
     return Status::OK;
